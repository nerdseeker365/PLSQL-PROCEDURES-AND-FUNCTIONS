->A sub program is a named block of code.
::::::::::::::::::::::::::::::::::TYPES OF SUB PROGRAMS::::::::::::::::::::::::::::::::::::
1.Stored Procedures.
2.Stored Functions.
3.DataBase Triggers.
4.Packages.
note::
->Stored Procedures are Pre-Compiled Queries.
->Whenever Procedures are called increase the performance of the application.
SYNTAX TO CREATE A STORED PROCEDURE:
create [or replace] procedure <pname>(<parameter name1>[mode type] <datatype>
is/as
<declare variables>;
<declare cursors>;
begin
<procedure body/statements>;
end;
/
MODE TYPES::
1.in mode
2.out mode
3.inout mode

SYTAX TO CALL A STORED PROCEDURE::
1.execute <pname>(values/(s));
2.exe <pname>(values/(s));
2.begin 
<pname>(values/(s));
end;
/

note::
here PLSQL programming must and should on server output
sql>set serveroutput on;

SQL> set serveroutput on
SQL> create or replace procedure p3131
  2  is
  3  begin
  4  dbms_output.put_line('hello');
  5  end;
  6  /

Procedure created.

SQL> exec p3131
hello

PL/SQL procedure successfully completed.

SQL> commit;

Commit complete.

SQL> execute p3131
hello

PL/SQL procedure successfully completed.

SQL> begin
  2  p3131;
  3  end;
  4  /
hello

PL/SQL procedure successfully completed.
SQL> create procedure p3132
  2  as
  3  begin
  4  dbms_output.put_line('queen');
  5  end;
  6  /

Procedure created.

SQL> exe p3132
queen

PL/SQL procedure successfully completed.

note::
after completing your work commit it ,commit means to store DataBase Objects perminantely.
SQL> commit;

Commit complete.

SQL> desc user_source;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 NAME                                               VARCHAR2(30)
 TYPE                                               VARCHAR2(12)
 LINE                                               NUMBER
 TEXT                                               VARCHAR2(4000)

SQL> select distinct name ,text from user_source;

NAME
------------------------------
TEXT
--------------------------------------------------------------------------------
FIND1_PASS_FAIL
if(m1<35 or m2<35 or m3<35)then

FIND1_PASS_FAIL
res:='fail';

FIND_PASS_FAIL
procedure find_pass_fail(m1 in number,m2 in number,res out varchar)


NAME
------------------------------
TEXT
--------------------------------------------------------------------------------
FIND_PASS_FAIL
as

FIND_PASS_FAIL
res:='pass';

FIRST_P1
y:=x*x;

SQL> select text from user_source where name='S1510';

TEXT
--------------------------------------------------------------------------------
procedure s1510
is
begin
dbms_output.put_line('welcome');
end;

NOTE::here S1510 name all characters are capital 

below Statements for finding all Procedures...
SQL> desc user_source;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 NAME                                               VARCHAR2(30)
 TYPE                                               VARCHAR2(12)
 LINE                                               NUMBER
 TEXT                                               VARCHAR2(4000)

SQL> select distinct name ,text from user_source;

note1::below Statement for finding procedure source code...

SQL> select text from user_source where name='S1510';

TEXT
--------------------------------------------------------------------------------
procedure s1510
is
begin
dbms_output.put_line('welcome');
end;

here show error is used to find out the errors.....

SQL> show error;
No errors.
SQL> show err;
No errors.
